;;; Custom Emacs Config
(custom-set-variables
 ;; custom-set-variables was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 '(blink-cursor-mode nil)
 '(column-number-mode t)
 '(custom-safe-themes (quote ("a3d519ee30c0aa4b45a277ae41c4fa1ae80e52f04098a2654979b1ab859ab0bf" "41b6698b5f9ab241ad6c30aea8c9f53d539e23ad4e3963abff4b57c0f8bf6730" "de2c46ed1752b0d0423cde9b6401062b67a6a1300c068d5d7f67725adc6c3afb" "e53cc4144192bb4e4ed10a3fa3e7442cae4c3d231df8822f6c02f1220a0d259a" "9bac44c2b4dfbb723906b8c491ec06801feb57aa60448d047dbfdbd1a8650897" "978ff9496928cc94639cb1084004bf64235c5c7fb0cfbcc38a3871eb95fa88f6" "51bea7765ddaee2aac2983fac8099ec7d62dff47b708aa3595ad29899e9e9e44" "f41fd682a3cd1e16796068a2ca96e82cfd274e58b978156da0acce4d56f2b0d5" "1affe85e8ae2667fb571fc8331e1e12840746dae5c46112d5abb0c3a973f5f5a" "2b5aa66b7d5be41b18cc67f3286ae664134b95ccc4a86c9339c886dfd736132d" "628278136f88aa1a151bb2d6c8a86bf2b7631fbea5f0f76cba2a0079cd910f7d" "bb08c73af94ee74453c90422485b29e5643b73b05e8de029a6909af6a3fb3f58" "06f0b439b62164c6f8f84fdda32b62fb50b6d00e8b01c2208e55543a6337433a" "1b8d67b43ff1723960eb5e0cba512a2c7a2ad544ddb2533a90101fd1852b426e" default)))
 '(erc-stamp-mode t)
 '(org-datetree-add-timestamp (quote inactive))
 '(org-default-notes-file "~/Dropbox/org_mode/incoming.org")
 '(org-directory "~/Dropbox/org_mode/")
 '(org-startup-truncated nil)
 '(show-paren-mode t)
 '(size-indication-mode t)
 '(tool-bar-mode nil))
(custom-set-faces
 ;; custom-set-faces was added by Custom.
 ;; If you edit it by hand, you could mess it up, so be careful.
 ;; Your init file should contain only one such instance.
 ;; If there is more than one, they won't work right.
 )
;; end of custom autogenerated code
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;

;; Start of ZPH configs
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;; Require various subfiles/namespaces: add them to '(list)
(mapc (lambda (feature)
        (require feature nil 'noerror)) 
        '(
          zph-packages
          zph-authentication
          zph-clojure
          zph-erc-config
          zph-funcs
          zph-ido
          zph-keybindings
          zph-osx
          zph-pivotal-tracker-config
          zph-server-hooks
          zph-term-config
          clojure-mode
          icicles
          ob-tangle
          org-install
          pivotal-tracker
          yasnippet
          ))
;; end auto-install/require packages
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;
;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;


(setq frame-title-format "%b")		; use buffer name for title
(setq display-buffer-reuse-frames t)    ; no new frame if already open
;; use this shell alias for emacs to run emacsclient unless emacs not running, then run server
;;(load-theme 'base16-railscasts t)
(load-theme 'sanityinc-tomorrow-bright t)
(global-hl-line-mode -1)
(setq tab-width 2)

(defmacro global-defkey (key def)
    "*Bind KEY globally to DEF.
  KEY should be a string in the format used for saving keyboard
  macros (cf. `insert-kbd-macro')."
    `(global-set-key (read-kbd-macro ,key) ,def))
(icy-mode 1)
(setq prelude-whitespace nil)
;; Setting rbenv path
(require 'exec-path-from-shell)
(when (memq window-system '(mac ns))
  (exec-path-from-shell-initialize))
(require 'ob-sml nil 'noerror)
(whitespace-mode -1)
(setq org-hide-leading-stars t)
(add-hook 'org-mode-hook (lambda () (
  ;;(global-set-key (kbd "\C-c \'") 'org-edit-src-code)
)))
(if (fboundp 'scroll-bar-mode) (scroll-bar-mode -1))
(if (fboundp 'menu-bar-mode) (menu-bar-mode 1))

(setq org-capture-templates
      ; '(("Incoming" ?i "** %t: %?\n  %i\n  %a"  "Uncategorized")))
  '(
    ("n" "Notes" entry (file+datetree "~/Dropbox/org_mode/incoming.org")
    "* %^{Description} %^g %?
    Added: %U")
    ("t" "Todo" entry (file+headline (concat org-directory "/incoming.org") "Tasks")
       "* TODO %?\n %i\n")
      ("l" "Link" plain (file (concat org-directory "/incoming.org"))
       "- %?\n %x\n")
  )
)
(add-hook 'shell-mode-hook 'ansi-color-for-comint-mode-on)
;; This will transform ansi color to faces in Emacs shell!
(ansi-color-for-comint-mode-on)
(defun eshell-handle-ansi-color ()
  (ansi-color-apply-on-region eshell-last-output-start
                              eshell-last-output-end))
(add-hook 'eshell-mode-hook
          '(lambda ()
             (add-to-list
              'eshell-output-filter-functions
              'eshell-handle-ansi-color)))
(org-babel-do-load-languages
 'org-babel-load-languages
 '( (perl . t)
    (ruby . t)
    (sh . t)
    (python . t)
    (emacs-lisp . t)
    ))
(setq org-confirm-babel-evaluate nil)

(set-face-attribute 'default nil :font "Source Code Pro-13")

;;(match-string "(dev)" "rr,stuff_dev_t,more")
(yas-global-mode 1)

;; fix some org-mode + yasnippet conflicts:
(defun yas/org-very-safe-expand ()
  (let ((yas/fallback-behavior 'return-nil)) (yas/expand)))

(add-hook 'org-mode-hook
          (lambda ()
            (org-babel-do-load-languages
             'org-babel-load-languages
             '( (perl . t)
                (ruby . t)
                (sh . t)
                (python . t)
                (emacs-lisp . t)
                ))
            (setq org-confirm-babel-evaluate nil)
            (make-variable-buffer-local 'yas/trigger-key)
            (setq yas/trigger-key [tab])
            (add-to-list 'org-tab-first-hook 'yas/org-very-safe-expand)
            (define-key yas/keymap [tab] 'yas/next-field)))

(key-chord-mode -1)
(require 'evil)
  (evil-mode 1)
(provide 'custom)
;;;END CUSTOM
